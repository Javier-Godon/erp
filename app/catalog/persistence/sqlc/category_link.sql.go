// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: category_link.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategoryLink = `-- name: CreateCategoryLink :one
INSERT INTO catalog.category_link (category_link_id, main_category_id, linked_category_id)
VALUES ($1, $2, $3)
RETURNING category_link_id, main_category_id, linked_category_id
`

type CreateCategoryLinkParams struct {
	CategoryLinkID   pgtype.UUID `json:"category_link_id"`
	MainCategoryID   pgtype.UUID `json:"main_category_id"`
	LinkedCategoryID pgtype.UUID `json:"linked_category_id"`
}

func (q *Queries) CreateCategoryLink(ctx context.Context, arg CreateCategoryLinkParams) (CatalogCategoryLink, error) {
	row := q.db.QueryRow(ctx, createCategoryLink, arg.CategoryLinkID, arg.MainCategoryID, arg.LinkedCategoryID)
	var i CatalogCategoryLink
	err := row.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID)
	return i, err
}

const deleteCategoryLinkById = `-- name: DeleteCategoryLinkById :exec
DELETE
FROM catalog.category_link
WHERE category_link_id = $1
`

func (q *Queries) DeleteCategoryLinkById(ctx context.Context, categoryLinkID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategoryLinkById, categoryLinkID)
	return err
}

const findAllCategoryLinks = `-- name: FindAllCategoryLinks :many
SELECT category_link_id, main_category_id, linked_category_id
FROM catalog.category_link
LIMIT $1 OFFSET $2
`

type FindAllCategoryLinksParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) FindAllCategoryLinks(ctx context.Context, arg FindAllCategoryLinksParams) ([]CatalogCategoryLink, error) {
	rows, err := q.db.Query(ctx, findAllCategoryLinks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CatalogCategoryLink{}
	for rows.Next() {
		var i CatalogCategoryLink
		if err := rows.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryLinkById = `-- name: FindCategoryLinkById :one
SELECT category_link_id, main_category_id, linked_category_id
FROM catalog.category_link
WHERE category_link_id = $1
LIMIT 1
`

func (q *Queries) FindCategoryLinkById(ctx context.Context, categoryLinkID pgtype.UUID) (CatalogCategoryLink, error) {
	row := q.db.QueryRow(ctx, findCategoryLinkById, categoryLinkID)
	var i CatalogCategoryLink
	err := row.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID)
	return i, err
}

const findCategoryLinkByIdForUpdate = `-- name: FindCategoryLinkByIdForUpdate :one
SELECT category_link_id, main_category_id, linked_category_id
FROM catalog.category_link
WHERE category_link_id = $1
LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) FindCategoryLinkByIdForUpdate(ctx context.Context, categoryLinkID pgtype.UUID) (CatalogCategoryLink, error) {
	row := q.db.QueryRow(ctx, findCategoryLinkByIdForUpdate, categoryLinkID)
	var i CatalogCategoryLink
	err := row.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID)
	return i, err
}

const findCategoryLinkByLinkedCategoryId = `-- name: FindCategoryLinkByLinkedCategoryId :one
SELECT category_link_id, main_category_id, linked_category_id
FROM catalog.category_link
WHERE linked_category_id = $1
LIMIT 1
`

func (q *Queries) FindCategoryLinkByLinkedCategoryId(ctx context.Context, linkedCategoryID pgtype.UUID) (CatalogCategoryLink, error) {
	row := q.db.QueryRow(ctx, findCategoryLinkByLinkedCategoryId, linkedCategoryID)
	var i CatalogCategoryLink
	err := row.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID)
	return i, err
}

const findCategoryLinkByLinkedCategoryIdForUpdate = `-- name: FindCategoryLinkByLinkedCategoryIdForUpdate :one
SELECT category_link_id, main_category_id, linked_category_id
FROM catalog.category_link
WHERE linked_category_id = $1
LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) FindCategoryLinkByLinkedCategoryIdForUpdate(ctx context.Context, linkedCategoryID pgtype.UUID) (CatalogCategoryLink, error) {
	row := q.db.QueryRow(ctx, findCategoryLinkByLinkedCategoryIdForUpdate, linkedCategoryID)
	var i CatalogCategoryLink
	err := row.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID)
	return i, err
}

const updateCategoryLink = `-- name: UpdateCategoryLink :one
UPDATE catalog.category_link
SET main_category_id=$2,
    linked_category_id=$3
WHERE category_link_id = $1
RETURNING category_link_id, main_category_id, linked_category_id
`

type UpdateCategoryLinkParams struct {
	CategoryLinkID   pgtype.UUID `json:"category_link_id"`
	MainCategoryID   pgtype.UUID `json:"main_category_id"`
	LinkedCategoryID pgtype.UUID `json:"linked_category_id"`
}

func (q *Queries) UpdateCategoryLink(ctx context.Context, arg UpdateCategoryLinkParams) (CatalogCategoryLink, error) {
	row := q.db.QueryRow(ctx, updateCategoryLink, arg.CategoryLinkID, arg.MainCategoryID, arg.LinkedCategoryID)
	var i CatalogCategoryLink
	err := row.Scan(&i.CategoryLinkID, &i.MainCategoryID, &i.LinkedCategoryID)
	return i, err
}
